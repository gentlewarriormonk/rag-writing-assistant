'use client';

import React, { useState, useRef, useEffect } from 'react';
import { useChat } from '@/contexts/chat-context';
import { useTheme } from '@/contexts/theme-context';
import MessageBubble from './message-bubble';
import ChatInput from './chat-input';
import ThinkingIndicator from '@/components/ui/ThinkingIndicator';
import Sidebar from './sidebar';
import OutputPanel from './OutputPanel';
import { useAuth } from '@/contexts/supabase-auth-context';
import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';
import type { Message, Conversation } from '@/contexts/chat-context';

interface DocumentOutput {
  id: string;
  title: string;
  content: string;
  createdAt: Date;
}

// Demo responses to simulate AI interaction
const demoResponses: Record<string, string> = {
  default: "I'm your AI writing assistant. How can I help you today?",
  greeting: "Hello! I'm here to help with your writing needs. Would you like me to help you draft something, revise existing text, or generate ideas?",
  help: "I can help you with various writing tasks like drafting emails, blog posts, essays, or creative content. Just let me know what you'd like to work on!",
  demo: "This is a demo of Kaku, your AI writing assistant. In the full version, I can help you create content that matches your writing style by learning from your previous work.",
  rewrite: "I've analyzed your text and here's a rewritten version that maintains your style but improves clarity:\n\n[Rewritten version would appear here in the full version]",
  continue: "Based on your writing style, here's how I would continue this text:\n\n[Continuation would appear here in the full version]",
};

// Sample document for demonstration purposes
const sampleDocument: DocumentOutput = {
  id: '1',
  title: 'Sample Document',
  content: 'This is a sample document generated by Kaku, your AI writing assistant. In a real application, this would be a complete document created based on your conversation with the AI. It would match your writing style and be ready for download or copying to your clipboard.',
  createdAt: new Date(),
};

// Get response based on user input
const getDemoResponse = (input: string): string => {
  const lowercaseInput = input.toLowerCase();
  
  if (lowercaseInput.includes('hello') || lowercaseInput.includes('hi')) {
    return demoResponses.greeting;
  } else if (lowercaseInput.includes('help')) {
    return demoResponses.help;
  } else if (lowercaseInput.includes('demo') || lowercaseInput.includes('what can you do')) {
    return demoResponses.demo;
  } else if (lowercaseInput.includes('rewrite') || lowercaseInput.includes('revise')) {
    return demoResponses.rewrite;
  } else if (lowercaseInput.includes('continue') || lowercaseInput.includes('go on')) {
    return demoResponses.continue;
  }
  
  return demoResponses.default;
};

export default function ChatInterface() {
  const { conversation, conversations, isLoading, sendMessage, isSidebarOpen, toggleSidebar, newConversation, setConversations } = useChat();
  const { colors } = useTheme();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [isHoveringSidebar, setIsHoveringSidebar] = useState(false);
  const [isHoveringContent, setIsHoveringContent] = useState(false);
  const hoverTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [sidebarLockOpen, setSidebarLockOpen] = useState(false);
  const { isDemo } = useAuth();
  const router = useRouter();
  
  // State for chat messages - sync with conversation from context
  const [messages, setMessages] = useState<Message[]>(conversation?.messages || [{
    id: '1',
    role: 'assistant',
    content: "Hello! I'm your AI writing assistant. How can I help you today?",
    timestamp: new Date().toISOString(),
  }]);

  // Keep messages in sync with conversation
  useEffect(() => {
    if (conversation?.messages) {
      setMessages(conversation.messages);
    } else {
      setMessages([{
        id: '1',
        role: 'assistant',
        content: "Hello! I'm your AI writing assistant. How can I help you today?",
        timestamp: new Date().toISOString(),
      }]);
    }
  }, [conversation]);
  
  // State for input text
  const [input, setInput] = useState('');
  
  // State for typing indicator
  const [isTyping, setIsTyping] = useState(false);
  
  // State for documents
  const [documents, setDocuments] = useState<DocumentOutput[]>([]);
  
  // State to control document panel visibility
  const [showDocumentPanel, setShowDocumentPanel] = useState(false);
  
  // State for starred chats
  const [starredChats, setStarredChats] = useState<string[]>([]);
  
  // State for style controls
  const [selectedStyle, setSelectedStyle] = useState<string>("Professional");
  const [selectedPurpose, setSelectedPurpose] = useState<string>("Business");
  const [showStyleSelector, setShowStyleSelector] = useState(false);
  const [showPurposeSelector, setShowPurposeSelector] = useState(false);
  
  // State for first-time user
  const [isFirstTimeUser, setIsFirstTimeUser] = useState(true);
  
  // State for corpus readiness
  const [isCorpusReady, setIsCorpusReady] = useState(false);
  
  // State for selected document ID
  const [selectedDocId, setSelectedDocId] = useState<string | null>(null);
  
  // Handle closing the document panel
  const handleCloseDocumentPanel = () => {
    setShowDocumentPanel(false);
  };
  
  // Toggle document panel visibility
  const handleToggleDocumentPanel = () => {
    setShowDocumentPanel(prev => !prev);
  };
  
  // Toggle star status for current conversation
  const handleToggleStar = () => {
    if (conversation?.id) {
      setStarredChats(prev => 
        prev.includes(conversation.id) 
          ? prev.filter(id => id !== conversation.id)
          : [...prev, conversation.id]
      );
    }
  };
  
  // Handle share conversation
  const handleShareConversation = () => {
    alert('Sharing functionality would be implemented here');
  };
  
  // Handle hover logic for sidebar
  const handleMouseEnterSidebar = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event bubbling
    
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    setIsHoveringSidebar(true);
  };

  const handleMouseLeaveSidebar = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event bubbling
    
    if (sidebarLockOpen) return;
    
    hoverTimeoutRef.current = setTimeout(() => {
      if (!isHoveringContent) {
        setIsHoveringSidebar(false);
      }
    }, 600); // Increased timeout to 600ms for better detection
  };

  const handleMouseEnterContent = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event bubbling
    setIsHoveringContent(true);
  };

  const handleMouseLeaveContent = (e: React.MouseEvent) => {
    e.stopPropagation(); // Prevent event bubbling
    setIsHoveringContent(false);
    
    if (!isHoveringSidebar && !sidebarLockOpen) {
      setIsHoveringSidebar(false);
    }
  };

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Clear hover timeout on unmount
  useEffect(() => {
    return () => {
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const currentInput = input.trim();
    if (!currentInput) return;
    
    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: currentInput,
      timestamp: new Date().toISOString(),
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);
    
    // Check for document creation command
    if (currentInput.toLowerCase().includes('create document')) {
      setTimeout(() => {
        const newDoc = { 
          ...sampleDocument, 
          id: Date.now().toString(),
          title: `Document ${documents.length + 1}`,
          content: 'This is a new document created from our conversation. You can edit, download, or copy its contents.',
          createdAt: new Date(),
        };
        setDocuments(prev => [...prev, newDoc]);
        setShowDocumentPanel(true);
        setSelectedDocId(newDoc.id);
        
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: "I've created a new document for you. You can view and edit it in the document panel.",
          timestamp: new Date().toISOString(),
        };
        
        setMessages((prev) => [...prev, assistantMessage]);
        setIsTyping(false);
      }, 1500);
      return;
    }
    
    // Handle other messages
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: getDemoResponse(currentInput),
        timestamp: new Date().toISOString(),
      };
      
      setMessages((prev) => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1500);
  };

  // Get current conversation title
  const generateTitle = (messages: Message[]): string => {
    if (messages.length > 1) {
      // Find the first user message
      const firstUserMessage = messages.find(m => m.role === 'user');
      if (firstUserMessage?.content) {
        // Clean up the content - remove newlines and extra spaces
        const cleanContent = firstUserMessage.content
          .replace(/\n/g, ' ')
          .replace(/\s+/g, ' ')
          .trim();
        
        // Get first sentence or first N characters
        const title = cleanContent.split(/[.!?]/, 1)[0] || cleanContent;
        return title.length > 40 ? title.substring(0, 40) + '...' : title;
      }
    }
    return 'New Conversation';
  };

  // Get current conversation title
  const getConversationTitle = () => {
    if (conversation?.title) {
      return conversation.title;
    }
    return generateTitle(messages);
  };

  // Handle starting a new chat
  const handleNewChat = () => {
    // Save current chat if it has messages
    if (messages.length > 1) { // More than just the initial greeting
      const title = generateTitle(messages);
      // Add current chat to history
      const currentChat: Conversation = {
        id: Date.now().toString(),
        title,
        messages: [...messages],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };
      
      // Update conversations in chat context
      setConversations(prev => {
        const updated = [currentChat, ...prev];
        localStorage.setItem('conversations', JSON.stringify(updated));
        return updated;
      });
    }
    
    // Use the chat context's newConversation function to create a new chat
    newConversation();
    
    // Reset document-related state
    setDocuments([]);
    setShowDocumentPanel(false);
    setSelectedDocId(null);
    setInput('');
  };
  
  // Check if current conversation is starred
  const isStarred = conversation?.id && starredChats.includes(conversation.id);

  // Toggle sidebar lock
  const handleSidebarLockToggle = (locked: boolean) => {
    setSidebarLockOpen(locked);
  };

  return (
    <div className="flex h-screen bg-[#212121] text-white overflow-hidden">
      {/* Sidebar */}
      <Sidebar 
        isOpen={isSidebarOpen || isHoveringSidebar || sidebarLockOpen}
        onClose={() => {
          if (!sidebarLockOpen) {
            setIsHoveringSidebar(false);
          }
        }}
        onMouseEnter={handleMouseEnterSidebar}
        onMouseLeave={handleMouseLeaveSidebar}
        onLockToggle={handleSidebarLockToggle}
        isLocked={sidebarLockOpen}
        onNewChat={handleNewChat}
      />
      
      {/* Main Content */}
      <div 
        className="flex-1 flex flex-col h-full"
        onMouseEnter={handleMouseEnterContent}
        onMouseLeave={handleMouseLeaveContent}
      >
        {/* Chat title header with controls */}
        <div className="border-b border-gray-800/50 py-3 px-4 bg-[#252525] flex justify-between items-center">
          <h1 className="text-sm font-medium text-gray-200 truncate max-w-xs">
            {getConversationTitle()}
          </h1>
          <div className="flex space-x-1">
            {/* Star button */}
            <button 
              onClick={handleToggleStar}
              className={`p-1.5 rounded-full ${
                isStarred 
                  ? 'text-yellow-400 bg-yellow-400/10' 
                  : 'text-gray-400 hover:text-yellow-400 hover:bg-gray-700/30'
              }`}
              aria-label={isStarred ? "Remove from favorites" : "Add to favorites"}
            >
              <svg className="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill={isStarred ? "currentColor" : "none"} viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={isStarred ? 0 : 2} d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
              </svg>
            </button>
            
            {/* Share button */}
            <button 
              onClick={handleShareConversation}
              className="p-1.5 rounded-full text-gray-400 hover:text-blue-400 hover:bg-gray-700/30"
              aria-label="Share conversation"
            >
              <svg className="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
              </svg>
            </button>
            
            {/* Document panel toggle - only show when documents exist */}
            {documents.length > 0 && (
              <button 
                onClick={handleToggleDocumentPanel}
                className={`p-1.5 rounded-full ${
                  showDocumentPanel
                    ? 'text-blue-400 bg-blue-400/10' 
                    : 'text-gray-400 hover:text-blue-400 hover:bg-gray-700/30'
                }`}
                aria-label={showDocumentPanel ? "Hide documents" : "Show documents"}
              >
                <svg className="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </button>
            )}
          </div>
        </div>
        
        {/* Chat messages area */}
        <div className="flex-1 overflow-y-auto px-4 py-4">
          <div className="max-w-3xl mx-auto">
            {/* Small notification banner for sample upload - only shown to first-time users */}
            {isFirstTimeUser && !isCorpusReady && (
              <div className="bg-[#0077b6]/20 text-white rounded-lg p-3 mb-4 flex items-center justify-between">
                <div>
                  <p className="text-sm">
                    Upload writing samples to get responses in your style. You have 3 messages until then.
                  </p>
                </div>
                <button 
                  onClick={() => router.push('/samples')}
                  className="bg-blue-600 hover:bg-blue-500 text-white text-xs px-3 py-1.5 rounded-md ml-4 whitespace-nowrap"
                >
                  Upload Samples
                </button>
              </div>
            )}
            
            <div className="space-y-6">
              {messages.map((msg) => (
                <MessageBubble
                  key={msg.id}
                  message={msg}
                  isLoading={isTyping && messages[messages.length - 1]?.id === msg.id}
                />
              ))}
              {isTyping && messages[messages.length - 1]?.role !== 'assistant' && (
                <div className="pl-12">
                  <ThinkingIndicator />
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>
          </div>
        </div>
        
        {/* Chat input area */}
        <div className="w-full px-4 py-3 bg-[#252525]">
          <ChatInput 
            onSendMessage={async (content) => {
              setInput(content);
              await new Promise(resolve => setTimeout(resolve, 0)); // Allow state to update
              handleSubmit({
                preventDefault: () => {},
              } as React.FormEvent);
            }} 
            isLoading={isTyping}
          />
          
          {/* Style Controls */}
          <div className="flex mt-2 text-xs text-gray-400 space-x-4 max-w-3xl mx-auto">
            {/* Style Selector */}
            <div className="relative">
              <button
                onClick={() => {
                  setShowStyleSelector(!showStyleSelector);
                  setShowPurposeSelector(false);
                }}
                className="flex items-center hover:text-blue-400 py-1"
              >
                <span className="mr-1">Style: {selectedStyle}</span>
                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              {showStyleSelector && (
                <div className="absolute bottom-full mb-2 left-0 bg-[#2e2e2e] border border-gray-700 rounded-md shadow-lg p-2 w-48">
                  {["Professional", "Casual", "Academic", "Creative", "Technical", "Persuasive"].map((style) => (
                    <button
                      key={style}
                      onClick={() => {
                        setSelectedStyle(style);
                        setShowStyleSelector(false);
                      }}
                      className={`w-full text-left px-3 py-1.5 rounded-md ${
                        selectedStyle === style 
                          ? "bg-blue-900/50 text-white" 
                          : "hover:bg-gray-700/30"
                      }`}
                    >
                      {style}
                    </button>
                  ))}
                </div>
              )}
            </div>
            
            {/* Purpose Selector */}
            <div className="relative">
              <button
                onClick={() => {
                  setShowPurposeSelector(!showPurposeSelector);
                  setShowStyleSelector(false);
                }}
                className="flex items-center hover:text-blue-400 py-1"
              >
                <span className="mr-1">Purpose: {selectedPurpose}</span>
                <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              {showPurposeSelector && (
                <div className="absolute bottom-full mb-2 left-0 bg-[#2e2e2e] border border-gray-700 rounded-md shadow-lg p-2 w-48">
                  {["Business", "Academic", "Marketing", "Social Media", "Personal", "Technical"].map((purpose) => (
                    <button
                      key={purpose}
                      onClick={() => {
                        setSelectedPurpose(purpose);
                        setShowPurposeSelector(false);
                      }}
                      className={`w-full text-left px-3 py-1.5 rounded-md ${
                        selectedPurpose === purpose 
                          ? "bg-blue-900/50 text-white" 
                          : "hover:bg-gray-700/30"
                      }`}
                    >
                      {purpose}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Output panel for documents */}
      <OutputPanel
        documents={documents}
        isVisible={showDocumentPanel}
        onClose={handleCloseDocumentPanel}
        selectedDocId={selectedDocId}
        onSelectDocument={setSelectedDocId}
      />
    </div>
  );
} 