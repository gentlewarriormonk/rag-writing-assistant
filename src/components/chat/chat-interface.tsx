'use client';

import React, { useState, useRef, useEffect } from 'react';
import { useChat } from '@/contexts/chat-context';
import { useTheme } from '@/contexts/theme-context';
import MessageBubble from './message-bubble';
import ChatInput from './chat-input';
import ThinkingIndicator from '@/components/ui/ThinkingIndicator';
import Sidebar from './sidebar';
import OutputPanel from './OutputPanel';
import { useAuth } from '@/contexts/supabase-auth-context';
import { Button } from '@/components/ui/button';
import { Tooltip } from '@/components/ui/tooltip';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface DocumentOutput {
  id: string;
  title: string;
  content: string;
  createdAt: Date;
}

// Demo responses to simulate AI interaction
const demoResponses: Record<string, string> = {
  default: "I'm your AI writing assistant. How can I help you today?",
  greeting: "Hello! I'm here to help with your writing needs. Would you like me to help you draft something, revise existing text, or generate ideas?",
  help: "I can help you with various writing tasks like drafting emails, blog posts, essays, or creative content. Just let me know what you'd like to work on!",
  demo: "This is a demo of Kaku, your AI writing assistant. In the full version, I can help you create content that matches your writing style by learning from your previous work.",
  rewrite: "I've analyzed your text and here's a rewritten version that maintains your style but improves clarity:\n\n[Rewritten version would appear here in the full version]",
  continue: "Based on your writing style, here's how I would continue this text:\n\n[Continuation would appear here in the full version]",
};

// Sample document for demonstration purposes
const sampleDocument: DocumentOutput = {
  id: '1',
  title: 'Sample Document',
  content: 'This is a sample document generated by Kaku, your AI writing assistant. In a real application, this would be a complete document created based on your conversation with the AI. It would match your writing style and be ready for download or copying to your clipboard.',
  createdAt: new Date(),
};

// Get response based on user input
const getDemoResponse = (input: string): string => {
  const lowercaseInput = input.toLowerCase();
  
  if (lowercaseInput.includes('hello') || lowercaseInput.includes('hi')) {
    return demoResponses.greeting;
  } else if (lowercaseInput.includes('help')) {
    return demoResponses.help;
  } else if (lowercaseInput.includes('demo') || lowercaseInput.includes('what can you do')) {
    return demoResponses.demo;
  } else if (lowercaseInput.includes('rewrite') || lowercaseInput.includes('revise')) {
    return demoResponses.rewrite;
  } else if (lowercaseInput.includes('continue') || lowercaseInput.includes('go on')) {
    return demoResponses.continue;
  }
  
  return demoResponses.default;
};

export default function ChatInterface() {
  const { conversation, isLoading, sendMessage, isSidebarOpen, toggleSidebar } = useChat();
  const { colors } = useTheme();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [isHoveringSidebar, setIsHoveringSidebar] = useState(false);
  const [isHoveringContent, setIsHoveringContent] = useState(false);
  const hoverTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const { isDemo } = useAuth();
  
  // State for chat messages
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: "Hello! I'm your AI writing assistant. How can I help you today?",
      timestamp: new Date(),
    },
  ]);
  
  // State for input text
  const [input, setInput] = useState('');
  
  // State for typing indicator
  const [isTyping, setIsTyping] = useState(false);
  
  // State for documents
  const [documents, setDocuments] = useState<DocumentOutput[]>([]);
  
  // State to control document panel visibility
  const [showDocumentPanel, setShowDocumentPanel] = useState(false);
  
  // State for starred chats
  const [starredChats, setStarredChats] = useState<string[]>([]);
  
  // Handle closing the document panel
  const handleCloseDocumentPanel = () => {
    setShowDocumentPanel(false);
  };
  
  // Toggle document panel visibility
  const handleToggleDocumentPanel = () => {
    setShowDocumentPanel(prev => !prev);
  };
  
  // Toggle star status for current conversation
  const handleToggleStar = () => {
    if (conversation?.id) {
      setStarredChats(prev => 
        prev.includes(conversation.id) 
          ? prev.filter(id => id !== conversation.id)
          : [...prev, conversation.id]
      );
    }
  };
  
  // Handle share conversation
  const handleShareConversation = () => {
    alert('Sharing functionality would be implemented here');
  };
  
  // For demonstration purposes, create a document when user types "create document"
  useEffect(() => {
    if (messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (
        lastMessage.role === 'user' && 
        lastMessage.content.toLowerCase().includes('create document')
      ) {
        // In a real app, this would be generated by the AI
        setTimeout(() => {
          setDocuments([...documents, { 
            ...sampleDocument, 
            id: Date.now().toString(),
            title: `Document ${documents.length + 1}`,
          }]);
          setShowDocumentPanel(true);
        }, 1500);
      }
    }
  }, [messages, documents]);
  
  // Handle hover logic for sidebar
  const handleMouseEnterSidebar = () => {
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    setIsHoveringSidebar(true);
  };

  const handleMouseLeaveSidebar = () => {
    hoverTimeoutRef.current = setTimeout(() => {
      if (!isHoveringContent) {
        setIsHoveringSidebar(false);
      }
    }, 300);
  };

  const handleMouseEnterContent = () => {
    setIsHoveringContent(true);
  };

  const handleMouseLeaveContent = () => {
    setIsHoveringContent(false);
    if (!isHoveringSidebar) {
      setIsHoveringSidebar(false);
    }
  };

  // Scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Clear hover timeout on unmount
  useEffect(() => {
    return () => {
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input,
      timestamp: new Date(),
    };
    
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);
    
    // Simulate AI response delay
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: getDemoResponse(userMessage.content),
        timestamp: new Date(),
      };
      
      setMessages((prev) => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1500);
  };

  // Get current conversation title
  const getConversationTitle = () => {
    if (conversation?.title) {
      return conversation.title;
    }
    
    // Try to generate a title from the first few messages
    if (messages.length > 1) {
      const userMessage = messages.find(m => m.role === 'user')?.content || '';
      if (userMessage.length > 0) {
        return userMessage.length > 30 
          ? userMessage.substring(0, 30) + '...' 
          : userMessage;
      }
    }
    
    return 'New Conversation';
  };
  
  // Check if current conversation is starred
  const isStarred = conversation?.id && starredChats.includes(conversation.id);

  return (
    <div className="flex h-screen bg-[#1a1a1a] text-white overflow-hidden">
      {/* Improved hover-sensitive left zone for sidebar trigger */}
      <div 
        className="fixed left-0 top-0 bottom-0 w-10 z-20"
        onMouseEnter={handleMouseEnterSidebar}
        onMouseLeave={handleMouseLeaveSidebar}
        aria-hidden="true"
      />
      
      {/* Collapsible sidebar - shown when hovering or explicitly opened */}
      <Sidebar 
        isOpen={isSidebarOpen || isHoveringSidebar} 
        onClose={() => setIsHoveringSidebar(false)}
        onMouseEnter={handleMouseEnterContent}
        onMouseLeave={handleMouseLeaveContent}
      />
      
      {/* Main chat area */}
      <main className="flex-1 flex flex-col h-full max-w-3xl mx-auto">
        {/* Chat title header with controls */}
        <div className="border-b border-gray-800/50 py-3 px-4 bg-[#1e1e1e] flex justify-between items-center">
          <h1 className="text-md font-medium text-gray-200">{getConversationTitle()}</h1>
          
          <div className="flex items-center space-x-2">
            <Tooltip content={isStarred ? "Unstar conversation" : "Star conversation"}>
              <button 
                onClick={handleToggleStar}
                className={`p-1.5 rounded-full ${
                  isStarred 
                    ? 'text-yellow-400 hover:bg-yellow-400/10' 
                    : 'text-gray-400 hover:text-yellow-400 hover:bg-gray-800'
                }`}
                aria-label={isStarred ? "Unstar conversation" : "Star conversation"}
              >
                <svg className="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill={isStarred ? "currentColor" : "none"} viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
              </button>
            </Tooltip>
            
            <Tooltip content="Share conversation">
              <button 
                onClick={handleShareConversation}
                className="p-1.5 rounded-full text-gray-400 hover:text-blue-400 hover:bg-gray-800"
                aria-label="Share conversation"
              >
                <svg className="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                </svg>
              </button>
            </Tooltip>
            
            <Tooltip content={showDocumentPanel ? "Hide documents" : "Show documents"}>
              <button 
                onClick={handleToggleDocumentPanel}
                className={`p-1.5 rounded-full ${
                  showDocumentPanel && documents.length > 0
                    ? 'text-blue-400 bg-blue-400/10' 
                    : 'text-gray-400 hover:text-blue-400 hover:bg-gray-800'
                }`}
                aria-label={showDocumentPanel ? "Hide documents" : "Show documents"}
                disabled={documents.length === 0}
              >
                <svg className="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </button>
            </Tooltip>
          </div>
        </div>
        
        {/* Header for demo mode indicator (minimal) */}
        {isDemo && (
          <div className="bg-blue-900/10 py-1 px-4">
            <p className="text-xs text-center text-blue-400">
              Demo Mode
            </p>
          </div>
        )}
        
        {/* Chat history */}
        <div className="flex-1 overflow-y-auto px-0 py-4 md:px-4 bg-[#1e1e1e]">
          {!conversation?.messages.length ? (
            <div className="h-full flex items-center justify-center">
              <div className="text-center space-y-3 max-w-lg px-4">
                <h2 className="text-xl font-medium text-white">Kaku Writing Assistant</h2>
                <p className="text-gray-400 text-sm">
                  AI writing that matches your style.
                </p>
                <p className="text-gray-500 text-xs mt-4">
                  Try typing "create document" to see the document panel
                </p>
              </div>
            </div>
          ) : (
            <div className="space-y-6 pb-24 px-4">
              {conversation.messages.map((message) => (
                <MessageBubble 
                  key={message.id} 
                  message={message} 
                />
              ))}
              <div ref={messagesEndRef} />
            </div>
          )}
        </div>
        
        {/* Thinking indicator - shown when loading */}
        {isLoading && (
          <div className="absolute bottom-20 left-1/2 transform -translate-x-1/2">
            <ThinkingIndicator />
          </div>
        )}
        
        {/* Input area - more minimal */}
        <div className="border-t border-gray-800/50 px-4 py-3 bg-[#1e1e1e]">
          <form onSubmit={handleSubmit} className="flex space-x-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Message..."
              className="flex-1 bg-[#252525] border border-gray-800 rounded-md px-4 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent text-white text-sm"
            />
            <Button type="submit" disabled={isTyping || !input.trim()} className="px-3 py-1 h-auto text-sm">
              Send
            </Button>
          </form>
        </div>
      </main>
      
      {/* Output panel for documents - only shown when documents are available */}
      <OutputPanel 
        documents={documents} 
        isVisible={showDocumentPanel && documents.length > 0}
        onClose={handleCloseDocumentPanel}
      />
    </div>
  );
} 